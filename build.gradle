/*
 * Copyright 2014 Netflix, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
buildscript {
    repositories { jcenter() }
    dependencies {
        classpath 'com.netflix.nebula:gradle-extra-configurations-plugin:2.0.1'
    }
}

plugins {
    id 'nebula.netflixoss' version '2.2.3'
}

ext {
    githubProjectName = "eureka"
}

subprojects {
    apply plugin: 'nebula.netflixoss'
    apply plugin: 'groovy'
    apply plugin: 'nebula.provided-base'

    group = "com.netflix.eureka2"

    repositories {
        jcenter()
    }

    /**
     * Exclude from the transitive dependencies all artifacts that we
     * include explicitly. Version resolution is usually done right by
     * gradle build, but confuses Intellij a lot.
     */
    configurations.all {
        exclude group: 'com.netflix.rxjava' // Use io.reactivex:rxjava
        exclude group: 'com.netflix.rxnetty' // Use io.reactivex:rxnetty
        exclude module: 'log4j' // From ocelli
        exclude module: 'slf4j-log4j12' // From ocelli
    }

    dependencies {
        compile "org.slf4j:slf4j-api:${slf4j_version}"

        testCompile "junit:junit:${junit_version}"
        testCompile "org.hamcrest:hamcrest-library:${hamcrest_version}"
        testCompile "org.mockito:mockito-core:${mockito_version}"
    }

    eclipse {
        classpath {
            // include 'provided' dependencies on the classpath
            plusConfigurations += [configurations.provided]

            downloadSources = true
            downloadJavadoc = true
        }
    }

    idea {
        module {
            // include 'provided' dependencies on the classpath
            scopes.PROVIDED.plus += [configurations.provided]
            scopes.PROVIDED.plus += [configurations.provided]
        }
    }

    tasks.withType(Javadoc).each {
        it.classpath = sourceSets.main.compileClasspath
    }

    test {
        useJUnit {
            excludeCategories 'com.netflix.eureka2.junit.categories.IntegrationTest'
            excludeCategories 'com.netflix.eureka2.junit.categories.LongRunningTest'
        }
    }

    task testAll(type: Test) {
        useJUnit {
        }
    }
}

