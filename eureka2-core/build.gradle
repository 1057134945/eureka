/*
 * Copyright 2014 Netflix, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'osgi'
apply plugin: 'com.github.johnrengelman.shadow'

configurations {
    avroTool
}

dependencies {
    avroTool "org.apache.avro:avro-tools:${avro_version}"

    compile "javax.inject:javax.inject:${javax_inject_version}"
    compile "io.reactivex:rxjava:${rxjava_version}"
    compile "io.reactivex:rxnetty:${rxnetty_version}"

    // As IDEs do not play well with shadowed dependencies, we should depend on
    // the original Avro jar when doing development
    if (project.hasProperty('dev') || System.properties['dev']) {
        println "In development mode - adding compile level dependency to Avro"
        compile "org.apache.avro:avro:${avro_version}"
    } else {
        println "Shadowing dependency to Avro"
        provided "org.apache.avro:avro:${avro_version}"
    }

    testCompile project(':eureka2-test-utils')
    testCompile project(':eureka2-testkit')
}

jar {
    manifest {
        name = 'eureka2-core'
        instruction 'Bundle-Vendor', 'Netflix'
        instruction 'Bundle-DocURL', 'https://github.com/Netflix/eureka'
        instruction 'Import-Package', '!org.junit,!junit.framework,!org.mockito.*,*'
    }
    from("${projectDir}/build/classes/main") {
        include("*.avpr")
    }
}

shadowJar {
    dependencies {
        include(dependency('org.apache.avro:avro'))
        include(dependency('com.thoughtworks.paranamer:paranamer'))
        include(dependency('org.xerial.snappy:snappy-java'))
    }
    classifier 'shadow'
    relocate 'org.apache.avro', 'com.netflix.shading.apache.avro'
    relocate 'com.thoughtworks.paranamer', 'com.netflix.shading.thoughtworks.paranamer'
    relocate 'org.xerial.snappy', 'com.netflix.shading.xerial.snappy'
}
task overriteJar << {
    def jarFile=file("${projectDir}/build/libs/eureka2-core-${version}.jar")
    def shadowJarFile=file("${projectDir}/build/libs/eureka2-core-${version}-shadow.jar")
    jarFile.delete();
    shadowJarFile.renameTo(jarFile)
}
jar.finalizedBy shadowJar
shadowJar.mustRunAfter jar
shadowJar.finalizedBy overriteJar

// Avro schema processing

task prepareOutputDir << {
    mkdir "build/classes/main"
}

task buildRegistrationSchema (type: JavaExec, dependsOn: 'prepareOutputDir') {
    group = "Avro"
    description = "Process Avro IDL files and generate Avro schema documents for registration protocol"

    main = "org.apache.avro.tool.Main"
    classpath = configurations.avroTool
    args = [
            "idl",
            "src/main/avro/registration-schema.avdl",
            "build/classes/main/registration-schema.avpr"
    ]
}
task buildReplicationSchema (type: JavaExec, dependsOn: 'prepareOutputDir') {
    group = "Avro"
    description = "Process Avro IDL files and generate Avro schema documents for replication protocol"

    main = "org.apache.avro.tool.Main"
    classpath = configurations.avroTool
    args = [
            "idl",
            "src/main/avro/replication-schema.avdl",
            "build/classes/main/replication-schema.avpr"
    ]
}
task buildDiscoverySchema (type: JavaExec, dependsOn: 'prepareOutputDir') {
    group = "Avro"
    description = "Process Avro IDL files and generate Avro schema documents for discovery protocol"

    main = "org.apache.avro.tool.Main"
    classpath = configurations.avroTool
    args = [
            "idl",
            "src/main/avro/discovery-schema.avdl",
            "build/classes/main/discovery-schema.avpr"
    ]
}

task avroSchemas << {}
avroSchemas.dependsOn buildRegistrationSchema, buildReplicationSchema, buildDiscoverySchema

compileJava.dependsOn avroSchemas
